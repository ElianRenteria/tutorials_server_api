{
  "image": "https://images.pexels.com/photos/14032280/pexels-photo-14032280.jpeg?auto=compress&cs=tinysrgb&w=600",
  "title": "Python III",
  "languages": ["Python", "Beginner"],
  "description": "Exploring Classes and Object-Oriented Programming in Python",
  "steps": [
    {
      "stepNumber": 1,
      "title": "Step 1: Classes",
      "description": "Classes are like blueprints for creating objects. They allow us to define the properties and behaviors of objects in our programs.",
      "codeSnippet": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nmy_dog = Dog('Buddy', 3)\nprint(my_dog.name)"
    },
    {
      "stepNumber": 2,
      "title": "Step 2: Objects",
      "description": "Objects are instances of classes. They represent real-world entities and allow us to interact with them in our programs.",
      "codeSnippet": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nmy_dog = Dog('Buddy', 3)\nprint(my_dog.age)"
    },
    {
      "stepNumber": 3,
      "title": "Step 3: Methods",
      "description": "Methods are functions defined inside a class. They allow objects to perform actions and interact with each other.",
      "codeSnippet": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print('Woof! Woof!')\n\nmy_dog = Dog('Buddy', 3)\nmy_dog.bark()"
    },
    {
      "stepNumber": 4,
      "title": "Step 4: Inheritance",
      "description": "Inheritance allows us to create new classes based on existing ones. It helps us reuse code and organize our programs more effectively.",
      "codeSnippet": "class Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        print('Woof! Woof!')\n\nmy_dog = Dog('Buddy')\nmy_dog.speak()"
    },
    {
      "stepNumber": 5,
      "title": "Step 5: Encapsulation",
      "description": "Encapsulation is the practice of hiding the internal state of an object and only allowing access to it through methods. It helps keep our code clean and maintainable.",
      "codeSnippet": "class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance\n\n    def get_balance(self):\n        return self.__balance\n\naccount = BankAccount(1000)\nprint(account.get_balance())"
    }
  ]
}

